{"ast":null,"code":"var _jsxFileName = \"/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Vid({\n  selectedVideoID,\n  Title\n}) {\n  _s();\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  const [subtitles, setSubtitles] = useState([]);\n  const displayTitle = Title || \"None selected\";\n  useEffect(() => {\n    const fetchVideoData = async () => {\n      setSelectedVideo(null);\n      setSubtitles([]);\n      try {\n        const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n        setSelectedVideo(response.data.video_url);\n        const subtitleTracks = response.data.subtitles.map(subtitle => {\n          const binaryStr = atob(subtitle.subtitle_file);\n          const len = binaryStr.length;\n          const bytes = new Uint8Array(len);\n          for (let i = 0; i < len; i++) {\n            bytes[i] = binaryStr.charCodeAt(i);\n          }\n          const decoder = new TextDecoder();\n          const decodedSubtitle = decoder.decode(bytes);\n          const blob = new Blob([decodedSubtitle], {\n            type: \"application/x-subrip\"\n          });\n          return {\n            language: subtitle.language,\n            subtitle_file_url: URL.createObjectURL(blob)\n          };\n        });\n        setSubtitles(subtitleTracks);\n      } catch (error) {\n        console.error(\"Error fetching video data:\", error);\n      }\n    };\n    if (selectedVideoID) {\n      fetchVideoData();\n    }\n  }, [selectedVideoID]);\n\n  // Generate a unique key based on selectedVideoID\n  const videoKey = selectedVideoID ? `video-${selectedVideoID}` : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main_vid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play_area\",\n      children: [console.log(selectedVideo), console.log(selectedVideoID), /*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"play_area\",\n        width: \"1000\",\n        height: \"500\",\n        controls: true,\n        children: [selectedVideo && /*#__PURE__*/_jsxDEV(\"source\", {\n          src: selectedVideo,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 27\n        }, this), subtitles.map((subtitle, index) => /*#__PURE__*/_jsxDEV(\"track\", {\n          src: subtitle.subtitle_file_url,\n          label: subtitle.language,\n          kind: \"subtitles\",\n          srcLang: subtitle.language,\n          default: index === 0 // Make the first track the default one\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this)), \"Your browser does not support the video tag.\"]\n      }, videoKey, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"title-playing\",\n      children: displayTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 1\n  }, this);\n}\n_s(Vid, \"sHodV4rzQ/5cKvjiwCHyzLVxZK8=\");\n_c = Vid;\nexport default Vid;\nvar _c;\n$RefreshReg$(_c, \"Vid\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Vid","selectedVideoID","Title","_s","selectedVideo","setSelectedVideo","subtitles","setSubtitles","displayTitle","fetchVideoData","response","get","data","video_url","subtitleTracks","map","subtitle","binaryStr","atob","subtitle_file","len","length","bytes","Uint8Array","i","charCodeAt","decoder","TextDecoder","decodedSubtitle","decode","blob","Blob","type","language","subtitle_file_url","URL","createObjectURL","error","console","videoKey","className","children","log","width","height","controls","src","fileName","_jsxFileName","lineNumber","columnNumber","index","label","kind","srcLang","default","_c","$RefreshReg$"],"sources":["/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Vid({ selectedVideoID, Title }) {\nconst [selectedVideo, setSelectedVideo] = useState(null);\nconst [subtitles, setSubtitles] = useState([]);\nconst displayTitle = Title || \"None selected\";\n\nuseEffect(() => {\nconst fetchVideoData = async () => {\n\n    setSelectedVideo(null);\n    setSubtitles([]);\n\n    try {\n        const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n        setSelectedVideo(response.data.video_url);\n\n        const subtitleTracks = response.data.subtitles.map((subtitle) => {\n        const binaryStr = atob(subtitle.subtitle_file);\n        const len = binaryStr.length;\n        const bytes = new Uint8Array(len);\n        for (let i = 0; i < len; i++) {\n        bytes[i] = binaryStr.charCodeAt(i);\n        }\n\n        const decoder = new TextDecoder();\n        const decodedSubtitle = decoder.decode(bytes);\n\n        const blob = new Blob([decodedSubtitle], { type: \"application/x-subrip\" });\n        return {\n        language: subtitle.language,\n        subtitle_file_url: URL.createObjectURL(blob),\n        };\n    });\n\n    setSubtitles(subtitleTracks);\n    } catch (error) {\n    console.error(\"Error fetching video data:\", error);\n    }\n};\n\nif (selectedVideoID) {\n    fetchVideoData();\n}\n}, [selectedVideoID]);\n\n// Generate a unique key based on selectedVideoID\nconst videoKey = selectedVideoID ? `video-${selectedVideoID}` : '';\n\nreturn (\n<div className=\"main_vid\">\n    <div className=\"play_area\">\n        {console.log(selectedVideo)}\n        {console.log(selectedVideoID)}\n    <video\n        className=\"play_area\"\n        width=\"1000\"\n        height=\"500\"\n        controls\n        key={videoKey} // Key property to force re-render when video changes\n    >\n        {selectedVideo && <source src={selectedVideo} type=\"video/mp4\" />}\n\n        {/* Load subtitles */}\n        {subtitles.map((subtitle, index) => (\n        <track\n            key={index}\n            src={subtitle.subtitle_file_url}\n            label={subtitle.language}\n            kind=\"subtitles\"\n            srcLang={subtitle.language}\n            default={index === 0} // Make the first track the default one\n        />\n        ))}\n\n        Your browser does not support the video tag.\n    </video>\n    </div>\n    <header className=\"title-playing\">{displayTitle}</header>\n</div>\n);\n}\n\nexport default Vid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}