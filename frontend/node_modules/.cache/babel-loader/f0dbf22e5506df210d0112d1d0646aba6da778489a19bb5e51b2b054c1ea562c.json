{"ast":null,"code":"var _jsxFileName = \"/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Vid({\n  selectedVideoID,\n  Title\n}) {\n  _s();\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  const [subtitles, setSubtitles] = useState([]);\n  const [currentSubtitle, setCurrentSubtitle] = useState(\"\");\n  const videoRef = useRef(null);\n  const displayTitle = Title || \"None selected\";\n  useEffect(() => {\n    const fetchVideoData = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n        setSelectedVideo(response.data.video_url);\n\n        // Decode base64 subtitles and create Blob URLs\n        const subtitleData = response.data.subtitles.map(subtitle => {\n          const decodedSubtitle = atob(subtitle.subtitle_file);\n          const blob = new Blob([decodedSubtitle], {\n            type: \"application/x-subrip\"\n          });\n          return {\n            language: subtitle.language,\n            subtitle_file_url: URL.createObjectURL(blob)\n          };\n        });\n        setSubtitles(subtitleData);\n      } catch (error) {\n        console.error(\"Error fetching video data:\", error);\n      }\n    };\n    if (selectedVideoID) {\n      fetchVideoData();\n    }\n  }, [selectedVideoID]);\n\n  // Function to parse SRT file and extract subtitles\n  const parseSRT = srt => {\n    const regex = /(\\d+)\\n([\\d:,]+) --> ([\\d:,]+)\\n(.+?)\\n\\n/g;\n    const matches = [];\n    let match;\n    while ((match = regex.exec(srt)) !== null) {\n      matches.push({\n        start: match[2],\n        end: match[3],\n        text: match[4].replace(/\\n/g, \" \")\n      });\n    }\n    return matches;\n  };\n\n  // Function to update subtitles based on video time\n  const updateSubtitles = () => {\n    const video = videoRef.current;\n    if (video) {\n      const currentTime = video.currentTime;\n      // Update subtitle logic here\n      // Example: loop through subtitles and find the one that matches the currentTime\n      // setCurrentSubtitle(...)\n    }\n  };\n  useEffect(() => {\n    const video = videoRef.current;\n    if (video) {\n      video.addEventListener('timeupdate', updateSubtitles);\n      return () => {\n        video.removeEventListener('timeupdate', updateSubtitles);\n      };\n    }\n  }, [videoRef.current]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main_vid\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"title-playing\",\n      children: displayTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play_area me-2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative',\n          width: '1000px',\n          height: '500px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          className: \"play_area\",\n          width: \"100%\",\n          height: \"100%\",\n          controls: true,\n          children: [selectedVideo && /*#__PURE__*/_jsxDEV(\"source\", {\n            src: selectedVideo,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 31\n          }, this), \"Your browser does not support the video tag.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), currentSubtitle && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            bottom: '10%',\n            left: '50%',\n            transform: 'translateX(-50%)',\n            color: 'white',\n            backgroundColor: 'rgba(0, 0, 0, 0.6)',\n            padding: '5px',\n            borderRadius: '5px',\n            textAlign: 'center',\n            width: '80%'\n          },\n          children: currentSubtitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(Vid, \"eZDq0B6pJxG63g+roDHDc4PzbQw=\");\n_c = Vid;\nexport default Vid;\nvar _c;\n$RefreshReg$(_c, \"Vid\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","Vid","selectedVideoID","Title","_s","selectedVideo","setSelectedVideo","subtitles","setSubtitles","currentSubtitle","setCurrentSubtitle","videoRef","displayTitle","fetchVideoData","response","get","data","video_url","subtitleData","map","subtitle","decodedSubtitle","atob","subtitle_file","blob","Blob","type","language","subtitle_file_url","URL","createObjectURL","error","console","parseSRT","srt","regex","matches","match","exec","push","start","end","text","replace","updateSubtitles","video","current","currentTime","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","position","width","height","ref","controls","src","bottom","left","transform","color","backgroundColor","padding","borderRadius","textAlign","_c","$RefreshReg$"],"sources":["/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\n\nfunction Vid({ selectedVideoID, Title }) {\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  const [subtitles, setSubtitles] = useState([]);\n  const [currentSubtitle, setCurrentSubtitle] = useState(\"\");\n  const videoRef = useRef(null);\n  const displayTitle = Title || \"None selected\";\n\n  useEffect(() => {\n    const fetchVideoData = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n        setSelectedVideo(response.data.video_url);\n\n        // Decode base64 subtitles and create Blob URLs\n        const subtitleData = response.data.subtitles.map((subtitle) => {\n          const decodedSubtitle = atob(subtitle.subtitle_file);\n          const blob = new Blob([decodedSubtitle], { type: \"application/x-subrip\" });\n          return {\n            language: subtitle.language,\n            subtitle_file_url: URL.createObjectURL(blob),\n          };\n        });\n        \n        setSubtitles(subtitleData);\n      } catch (error) {\n        console.error(\"Error fetching video data:\", error);\n      }\n    };\n\n    if (selectedVideoID) {\n      fetchVideoData();\n    }\n  }, [selectedVideoID]);\n\n  // Function to parse SRT file and extract subtitles\n  const parseSRT = (srt) => {\n    const regex = /(\\d+)\\n([\\d:,]+) --> ([\\d:,]+)\\n(.+?)\\n\\n/g;\n    const matches = [];\n    let match;\n    while ((match = regex.exec(srt)) !== null) {\n      matches.push({\n        start: match[2],\n        end: match[3],\n        text: match[4].replace(/\\n/g, \" \"),\n      });\n    }\n    return matches;\n  };\n\n  // Function to update subtitles based on video time\n  const updateSubtitles = () => {\n    const video = videoRef.current;\n    if (video) {\n      const currentTime = video.currentTime;\n      // Update subtitle logic here\n      // Example: loop through subtitles and find the one that matches the currentTime\n      // setCurrentSubtitle(...)\n    }\n  };\n\n  useEffect(() => {\n    const video = videoRef.current;\n    if (video) {\n      video.addEventListener('timeupdate', updateSubtitles);\n      return () => {\n        video.removeEventListener('timeupdate', updateSubtitles);\n      };\n    }\n  }, [videoRef.current]);\n\n  return (\n    <div className=\"main_vid\">\n      <header className=\"title-playing\">{displayTitle}</header>\n      <div className=\"play_area me-2\">\n        <div style={{ position: 'relative', width: '1000px', height: '500px' }}>\n          <video\n            ref={videoRef}\n            className=\"play_area\"\n            width=\"100%\"\n            height=\"100%\"\n            controls\n          >\n            {selectedVideo && <source src={selectedVideo} type=\"video/mp4\" />}\n            Your browser does not support the video tag.\n          </video>\n          {currentSubtitle && (\n            <div\n              style={{\n                position: 'absolute',\n                bottom: '10%',\n                left: '50%',\n                transform: 'translateX(-50%)',\n                color: 'white',\n                backgroundColor: 'rgba(0, 0, 0, 0.6)',\n                padding: '5px',\n                borderRadius: '5px',\n                textAlign: 'center',\n                width: '80%',\n              }}\n            >\n              {currentSubtitle}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Vid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}