{"ast":null,"code":"var _jsxFileName = \"/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Vid({\n  selectedVideoID,\n  Title\n}) {\n  _s();\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  const [selectedSubtitle, setSubtitle] = useState([]);\n  const displayTitle = Title || \"None selected\";\n  useEffect(() => {\n    const fetchVideoData = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n        setSelectedVideo(response.data.video_url);\n\n        // Decode base64 subtitles and create Blob URLs\n        const subtitles = response.data.subtitles.map(subtitle => {\n          const decodedSubtitle = atob(subtitle.subtitle_file);\n          const blob = new Blob([decodedSubtitle], {\n            type: \"application/x-subrip\"\n          });\n          return {\n            language: subtitle.language,\n            subtitle_file_url: URL.createObjectURL(blob)\n          };\n        });\n        setSubtitle(subtitles);\n      } catch (error) {\n        console.error(\"Error fetching video data:\", error);\n      }\n    };\n    if (selectedVideoID) {\n      fetchVideoData();\n    }\n  }, [selectedVideoID]);\n\n  // Generate a unique key based on selectedVideoID\n  const videoKey = selectedVideoID ? `video-${selectedVideoID}` : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main_vid border\",\n    children: [console.log(selectedVideo), console.log(selectedSubtitle), console.log(selectedVideoID), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"title-playing\",\n      children: displayTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play_area\",\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"play_area\",\n        width: \"1000\",\n        height: \"500\",\n        controls: true,\n        children: [selectedVideo && /*#__PURE__*/_jsxDEV(\"source\", {\n          src: selectedVideo,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 31\n        }, this), selectedSubtitle.map((subtitle, index) => /*#__PURE__*/_jsxDEV(\"track\", {\n          src: subtitle.subtitle_file_url,\n          label: subtitle.language,\n          kind: \"subtitles\",\n          srcLang: subtitle.language,\n          default: index === 0\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this)), \"Your browser does not support the video tag.\"]\n      }, videoKey, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n_s(Vid, \"2kIEbIX5IEjBTT8SLfMTz64XDKs=\");\n_c = Vid;\nexport default Vid;\nvar _c;\n$RefreshReg$(_c, \"Vid\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Vid","selectedVideoID","Title","_s","selectedVideo","setSelectedVideo","selectedSubtitle","setSubtitle","displayTitle","fetchVideoData","response","get","data","video_url","subtitles","map","subtitle","decodedSubtitle","atob","subtitle_file","blob","Blob","type","language","subtitle_file_url","URL","createObjectURL","error","console","videoKey","className","children","log","fileName","_jsxFileName","lineNumber","columnNumber","width","height","controls","src","index","label","kind","srcLang","default","_c","$RefreshReg$"],"sources":["/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx"],"sourcesContent":["    import React, { useState, useEffect } from \"react\";\n    import axios from \"axios\";\n\n    function Vid({ selectedVideoID, Title }) {\n    const [selectedVideo, setSelectedVideo] = useState(null);\n    const [selectedSubtitle, setSubtitle] = useState([]);\n    const displayTitle = Title || \"None selected\";\n\n    useEffect(() => {\n        const fetchVideoData = async () => {\n        try {\n            const response = await axios.get(\n            `http://localhost:8000/play/${selectedVideoID}/`\n            );\n            setSelectedVideo(response.data.video_url);\n\n            // Decode base64 subtitles and create Blob URLs\n            const subtitles = response.data.subtitles.map((subtitle) => {\n            const decodedSubtitle = atob(subtitle.subtitle_file);\n            const blob = new Blob([decodedSubtitle], {\n                type: \"application/x-subrip\",\n            });\n            return {\n                language: subtitle.language,\n                subtitle_file_url: URL.createObjectURL(blob),\n            };\n            });\n\n            setSubtitle(subtitles);\n        } catch (error) {\n            console.error(\"Error fetching video data:\", error);\n        }\n        };\n\n        if (selectedVideoID) {\n        fetchVideoData();\n        }\n    }, [selectedVideoID]);\n\n    // Generate a unique key based on selectedVideoID\n    const videoKey = selectedVideoID ? `video-${selectedVideoID}` : '';\n\n    return (\n        <div className=\"main_vid border\">\n        {console.log(selectedVideo)}\n        {console.log(selectedSubtitle)}\n        {console.log(selectedVideoID)}\n        <header className=\"title-playing\">{displayTitle}</header>\n        <div className=\"play_area\">\n            <video\n            className=\"play_area\"\n            width=\"1000\"\n            height=\"500\"\n            controls\n            key={videoKey} // Key property to force re-render\n            >\n            {selectedVideo && <source src={selectedVideo} type=\"video/mp4\" />}\n            {selectedSubtitle.map((subtitle, index) => (\n                <track\n                key={index}\n                src={subtitle.subtitle_file_url}\n                label={subtitle.language}\n                kind=\"subtitles\"\n                srcLang={subtitle.language}\n                default={index === 0}\n                />\n            ))}\n            Your browser does not support the video tag.\n            </video>\n        </div>\n        </div>\n    );\n    }\n\n    export default Vid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}