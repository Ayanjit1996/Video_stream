{"ast":null,"code":"var _jsxFileName = \"/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport ReactPlayer from \"react-player\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Vid({\n  selectedVideoID,\n  Title,\n  setSub,\n  seconds,\n  setSeconds\n}) {\n  _s();\n  const [subtitles, setSubtitles] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [videoUrl, setVideoUrl] = useState(\"\");\n  const displayTitle = Title || \"None selected\";\n  useEffect(() => {\n    const fetchVideoData = async () => {\n      if (!selectedVideoID) return;\n      setLoading(true);\n      try {\n        const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n        setVideoUrl(response.data.video_url); // Set video URL\n        await loadSubtitles(response.data.subtitles); // Load subtitles\n\n        // If seconds are provided, fetch video stream\n        if (seconds) {\n          await fetchVideoStream(seconds);\n        }\n      } catch (error) {\n        console.error(\"Error fetching video data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchVideoData();\n  }, [selectedVideoID, setSub, seconds]);\n  const loadSubtitles = async subtitlesArray => {\n    const allSubtitles = {};\n    const subtitleFiles = [];\n    await Promise.all(subtitlesArray.map(async subtitle => {\n      try {\n        const subtitleResponse = await axios.get(`http://localhost:8000/subtitles/${selectedVideoID}/${subtitle.language}/`);\n        const base64Data = subtitleResponse.data.subtitle_file;\n        const binaryString = atob(base64Data);\n        const binaryLength = binaryString.length;\n        const bytes = new Uint8Array(binaryLength);\n        for (let i = 0; i < binaryLength; i++) {\n          bytes[i] = binaryString.charCodeAt(i);\n        }\n        const blob = new Blob([bytes], {\n          type: 'application/x-subrip'\n        });\n        const url = URL.createObjectURL(blob);\n        allSubtitles[subtitle.language] = JSON.parse(subtitleResponse.data.subtitle);\n        subtitleFiles.push({\n          language: subtitle.language,\n          subtitle_file_url: url\n        });\n      } catch (error) {\n        console.error(`Error fetching subtitle for language ${subtitle.language}:`, error);\n      }\n    }));\n    setSub(allSubtitles);\n    setSubtitles(subtitleFiles);\n  };\n  const fetchVideoStream = async seconds => {\n    if (loading) return; // Prevent multiple concurrent fetches\n\n    const byteRange = calculateByteRange(seconds);\n    try {\n      const streamResponse = await axios.post(`http://localhost:8000/stream/${selectedVideoID}/`, null, {\n        headers: {\n          'Range': byteRange\n        },\n        responseType: 'blob'\n      });\n      const videoBlobUrl = URL.createObjectURL(streamResponse.data);\n      if (streamResponse.data.type.startsWith('video/')) {\n        setVideoUrl(videoBlobUrl);\n      } else {\n        console.error(\"Received invalid video blob type:\", streamResponse.data.type);\n      }\n    } catch (error) {\n      console.error(\"Error fetching video stream:\", error);\n    }\n  };\n  const calculateByteRange = seconds => {\n    const bytesPerSecond = 1024; // Adjust based on your video's bitrate\n    const startByte = seconds * bytesPerSecond;\n    const endByte = startByte + bytesPerSecond - 1;\n    return `bytes=${startByte}-${endByte}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main_vid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play_area\",\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-circle\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(ReactPlayer, {\n        url: videoUrl,\n        controls: true,\n        width: \"100%\",\n        height: \"500px\",\n        onError: error => console.error(\"Error loading video:\", error),\n        onReady: () => {\n          if (seconds) {\n            videoRef.current.seekTo(seconds);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"title-playing\",\n      children: displayTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n_s(Vid, \"x9kYNHkVxlUR166QDppVIqozRuU=\");\n_c = Vid;\nexport default Vid;\nvar _c;\n$RefreshReg$(_c, \"Vid\");","map":{"version":3,"names":["React","useState","useEffect","axios","ReactPlayer","jsxDEV","_jsxDEV","Vid","selectedVideoID","Title","setSub","seconds","setSeconds","_s","subtitles","setSubtitles","loading","setLoading","videoUrl","setVideoUrl","displayTitle","fetchVideoData","response","get","data","video_url","loadSubtitles","fetchVideoStream","error","console","subtitlesArray","allSubtitles","subtitleFiles","Promise","all","map","subtitle","subtitleResponse","language","base64Data","subtitle_file","binaryString","atob","binaryLength","length","bytes","Uint8Array","i","charCodeAt","blob","Blob","type","url","URL","createObjectURL","JSON","parse","push","subtitle_file_url","byteRange","calculateByteRange","streamResponse","post","headers","responseType","videoBlobUrl","startsWith","bytesPerSecond","startByte","endByte","className","children","fileName","_jsxFileName","lineNumber","columnNumber","controls","width","height","onError","onReady","videoRef","current","seekTo","_c","$RefreshReg$"],"sources":["/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport ReactPlayer from \"react-player\";\n\nfunction Vid({ selectedVideoID, Title, setSub, seconds, setSeconds }) {\n    const [subtitles, setSubtitles] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [videoUrl, setVideoUrl] = useState(\"\");\n    const displayTitle = Title || \"None selected\";\n\n    useEffect(() => {\n        const fetchVideoData = async () => {\n            if (!selectedVideoID) return;\n\n            setLoading(true);\n            try {\n                const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n                setVideoUrl(response.data.video_url); // Set video URL\n                await loadSubtitles(response.data.subtitles); // Load subtitles\n\n                // If seconds are provided, fetch video stream\n                if (seconds) {\n                    await fetchVideoStream(seconds);\n                }\n            } catch (error) {\n                console.error(\"Error fetching video data:\", error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchVideoData();\n    }, [selectedVideoID, setSub, seconds]);\n\n    const loadSubtitles = async (subtitlesArray) => {\n        const allSubtitles = {};\n        const subtitleFiles = [];\n\n        await Promise.all(\n            subtitlesArray.map(async (subtitle) => {\n                try {\n                    const subtitleResponse = await axios.get(`http://localhost:8000/subtitles/${selectedVideoID}/${subtitle.language}/`);\n                    const base64Data = subtitleResponse.data.subtitle_file;\n                    const binaryString = atob(base64Data);\n                    const binaryLength = binaryString.length;\n                    const bytes = new Uint8Array(binaryLength);\n                    for (let i = 0; i < binaryLength; i++) {\n                        bytes[i] = binaryString.charCodeAt(i);\n                    }\n                    const blob = new Blob([bytes], { type: 'application/x-subrip' });\n                    const url = URL.createObjectURL(blob);\n                    allSubtitles[subtitle.language] = JSON.parse(subtitleResponse.data.subtitle);\n                    subtitleFiles.push({ language: subtitle.language, subtitle_file_url: url });\n                } catch (error) {\n                    console.error(`Error fetching subtitle for language ${subtitle.language}:`, error);\n                }\n            })\n        );\n\n        setSub(allSubtitles);\n        setSubtitles(subtitleFiles);\n    };\n\n    const fetchVideoStream = async (seconds) => {\n        if (loading) return; // Prevent multiple concurrent fetches\n\n        const byteRange = calculateByteRange(seconds);\n        try {\n            const streamResponse = await axios.post(`http://localhost:8000/stream/${selectedVideoID}/`, null, {\n                headers: { 'Range': byteRange },\n                responseType: 'blob'\n            });\n\n            const videoBlobUrl = URL.createObjectURL(streamResponse.data);\n            if (streamResponse.data.type.startsWith('video/')) {\n                setVideoUrl(videoBlobUrl);\n            } else {\n                console.error(\"Received invalid video blob type:\", streamResponse.data.type);\n            }\n        } catch (error) {\n            console.error(\"Error fetching video stream:\", error);\n        }\n    };\n\n    const calculateByteRange = (seconds) => {\n        const bytesPerSecond = 1024; // Adjust based on your video's bitrate\n        const startByte = seconds * bytesPerSecond;\n        const endByte = startByte + bytesPerSecond - 1;\n        return `bytes=${startByte}-${endByte}`;\n    };\n\n    return (\n        <div className=\"main_vid\">\n            <div className=\"play_area\">\n                {loading && <div className=\"loading-circle\">Loading...</div>}\n                <ReactPlayer\n                    url={videoUrl}\n                    controls\n                    width=\"100%\"\n                    height=\"500px\"\n                    onError={(error) => console.error(\"Error loading video:\", error)}\n                    onReady={() => {\n                        if (seconds) {\n                            videoRef.current.seekTo(seconds);\n                        }\n                    }}\n                />\n            </div>\n            <header className=\"title-playing\">{displayTitle}</header>\n        </div>\n    );\n}\n\nexport default Vid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}