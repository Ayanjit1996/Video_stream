{"ast":null,"code":"var _jsxFileName = \"/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Vid({\n  selectedVideoID,\n  Title,\n  setSub\n}) {\n  _s();\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  const [subtitles, setSubtitles] = useState([]);\n  const displayTitle = Title || \"None selected\";\n  useEffect(() => {\n    const fetchVideoData = async () => {\n      setSelectedVideo(null);\n      setSubtitles([]);\n      try {\n        const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n        setSelectedVideo(response.data.video_url);\n        const subtitleTracks = await Promise.all(response.data.subtitles.map(async subtitle => {\n          try {\n            const subtitleResponse = await axios.get(`http://localhost:8000/api/subtitles/${selectedVideoID}/${subtitle.language}/`);\n            const base64Data = subtitleResponse.data.subtitle_file;\n            const binaryString = atob(base64Data);\n            const binaryLength = binaryString.length;\n            const bytes = new Uint8Array(binaryLength);\n            for (let i = 0; i < binaryLength; i++) {\n              bytes[i] = binaryString.charCodeAt(i);\n            }\n\n            // Convert the JSON subtitle text into an array of objects\n            const jsonSubtitles = JSON.parse(subtitleResponse.data.subtitle);\n            const subtitleArray = Object.entries(jsonSubtitles).map(([timestamp, dialogue]) => ({\n              timestamp,\n              dialogue\n            }));\n            const decoder = new TextDecoder('utf-8');\n            const decodedText = decoder.decode(bytes);\n            return {\n              language: subtitle.language,\n              subtitle: decodedText,\n              // Store the decoded subtitle text\n              subtitle_file_url: URL.createObjectURL(new Blob([bytes], {\n                type: 'application/x-subrip'\n              })),\n              subtitleArray // Store the array of subtitle objects\n            };\n          } catch (error) {\n            console.error(`Error fetching subtitle for language ${subtitle.language}:`, error);\n            return null;\n          }\n        }));\n        const validTracks = subtitleTracks.filter(track => track !== null);\n        setSubtitles(validTracks);\n        if (validTracks.length > 0) {\n          // Set the subtitles for the first valid track or combine them as needed\n          setSub(validTracks.map(track => track.subtitle).join(\"\\n\")); // or just the first one\n        }\n      } catch (error) {\n        console.error(\"Error fetching video data:\", error);\n      }\n    };\n    if (selectedVideoID) {\n      fetchVideoData();\n    }\n  }, [selectedVideoID]);\n  const videoKey = selectedVideoID ? `video-${selectedVideoID}` : \"\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main_vid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play_area\",\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"play_area\",\n        width: \"1000\",\n        height: \"500\",\n        controls: true,\n        children: [selectedVideo && /*#__PURE__*/_jsxDEV(\"source\", {\n          src: selectedVideo,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 39\n        }, this), subtitles.map((subtitle, index) => /*#__PURE__*/_jsxDEV(\"track\", {\n          src: subtitle.subtitle_file_url,\n          label: subtitle.language,\n          kind: \"subtitles\",\n          srcLang: subtitle.language,\n          default: index === 0\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)), \"Your browser does not support the video tag.\"]\n      }, videoKey, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"title-playing\",\n      children: displayTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n_s(Vid, \"sHodV4rzQ/5cKvjiwCHyzLVxZK8=\");\n_c = Vid;\nexport default Vid;\nvar _c;\n$RefreshReg$(_c, \"Vid\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Vid","selectedVideoID","Title","setSub","_s","selectedVideo","setSelectedVideo","subtitles","setSubtitles","displayTitle","fetchVideoData","response","get","data","video_url","subtitleTracks","Promise","all","map","subtitle","subtitleResponse","language","base64Data","subtitle_file","binaryString","atob","binaryLength","length","bytes","Uint8Array","i","charCodeAt","jsonSubtitles","JSON","parse","subtitleArray","Object","entries","timestamp","dialogue","decoder","TextDecoder","decodedText","decode","subtitle_file_url","URL","createObjectURL","Blob","type","error","console","validTracks","filter","track","join","videoKey","className","children","width","height","controls","src","fileName","_jsxFileName","lineNumber","columnNumber","index","label","kind","srcLang","default","_c","$RefreshReg$"],"sources":["/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Vid({ selectedVideoID, Title, setSub }) {\n    const [selectedVideo, setSelectedVideo] = useState(null);\n    const [subtitles, setSubtitles] = useState([]);\n    const displayTitle = Title || \"None selected\";\n\n    useEffect(() => {\n        const fetchVideoData = async () => {\n            setSelectedVideo(null);\n            setSubtitles([]);\n\n            try {\n                const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n                setSelectedVideo(response.data.video_url);\n\n                const subtitleTracks = await Promise.all(\n                    response.data.subtitles.map(async (subtitle) => {\n                        try {\n                            const subtitleResponse = await axios.get(`http://localhost:8000/api/subtitles/${selectedVideoID}/${subtitle.language}/`);\n                            const base64Data = subtitleResponse.data.subtitle_file;\n\n                            const binaryString = atob(base64Data);\n                            const binaryLength = binaryString.length;\n                            const bytes = new Uint8Array(binaryLength);\n                            for (let i = 0; i < binaryLength; i++) {\n                                bytes[i] = binaryString.charCodeAt(i);\n                            }\n\n                            // Convert the JSON subtitle text into an array of objects\n                            const jsonSubtitles = JSON.parse(subtitleResponse.data.subtitle);\n                            const subtitleArray = Object.entries(jsonSubtitles).map(([timestamp, dialogue]) => ({\n                                timestamp,\n                                dialogue,\n                            }));\n\n                            const decoder = new TextDecoder('utf-8');\n                            const decodedText = decoder.decode(bytes);\n\n                            return {\n                                language: subtitle.language,\n                                subtitle: decodedText, // Store the decoded subtitle text\n                                subtitle_file_url: URL.createObjectURL(new Blob([bytes], { type: 'application/x-subrip' })),\n                                subtitleArray, // Store the array of subtitle objects\n                            };\n                        } catch (error) {\n                            console.error(`Error fetching subtitle for language ${subtitle.language}:`, error);\n                            return null;\n                        }\n                    })\n                );\n\n                const validTracks = subtitleTracks.filter(track => track !== null);\n                setSubtitles(validTracks);\n\n                if (validTracks.length > 0) {\n                    // Set the subtitles for the first valid track or combine them as needed\n                    setSub(validTracks.map(track => track.subtitle).join(\"\\n\")); // or just the first one\n                }\n            } catch (error) {\n                console.error(\"Error fetching video data:\", error);\n            }\n        };\n\n        if (selectedVideoID) {\n            fetchVideoData();\n        }\n    }, [selectedVideoID]);\n\n    const videoKey = selectedVideoID ? `video-${selectedVideoID}` : \"\";\n\n    return (\n        <div className=\"main_vid\">\n            <div className=\"play_area\">\n                <video className=\"play_area\" width=\"1000\" height=\"500\" controls key={videoKey}>\n                    {selectedVideo && <source src={selectedVideo} type=\"video/mp4\" />}\n                    {subtitles.map((subtitle, index) => (\n                        <track\n                            key={index}\n                            src={subtitle.subtitle_file_url}\n                            label={subtitle.language}\n                            kind=\"subtitles\"\n                            srcLang={subtitle.language}\n                            default={index === 0}\n                        />\n                    ))}\n                    Your browser does not support the video tag.\n                </video>\n            </div>\n            <header className=\"title-playing\">{displayTitle}</header>\n        </div>\n    );\n}\n\nexport default Vid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}