{"ast":null,"code":"var _jsxFileName = \"/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Vid({\n  selectedVideoID,\n  Title,\n  setSub\n}) {\n  _s();\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  const [subtitles, setSubtitles] = useState([]);\n  const [loading, setLoading] = useState(false); // Loading state\n  const videoRef = useRef(null); // Ref for the video element\n  const displayTitle = Title || \"None selected\";\n  useEffect(() => {\n    const fetchVideoData = async () => {\n      setSelectedVideo(null);\n      setSubtitles([]);\n      setLoading(true); // Set loading to true when starting to fetch\n\n      try {\n        const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n        setSelectedVideo(response.data.video_url);\n        const allSubtitles = {}; // Object to accumulate all subtitles\n        const subtitleFiles = []; // Array to store subtitle files\n\n        await Promise.all(response.data.subtitles.map(async subtitle => {\n          try {\n            const subtitleResponse = await axios.get(`http://localhost:8000/subtitles/${selectedVideoID}/${subtitle.language}/`);\n            const base64Data = subtitleResponse.data.subtitle_file;\n            const binaryString = atob(base64Data);\n            const binaryLength = binaryString.length;\n            const bytes = new Uint8Array(binaryLength);\n            for (let i = 0; i < binaryLength; i++) {\n              bytes[i] = binaryString.charCodeAt(i);\n            }\n            const blob = new Blob([bytes], {\n              type: 'application/x-subrip'\n            });\n            const url = URL.createObjectURL(blob);\n\n            // Store the JSON object of subtitles in the allSubtitles object\n            const jsonSubtitles = JSON.parse(subtitleResponse.data.subtitle);\n            allSubtitles[subtitle.language] = jsonSubtitles; // Add to the object by language\n\n            // Push the subtitle info into the subtitleFiles array\n            subtitleFiles.push({\n              language: subtitle.language,\n              subtitle_file_url: url\n            });\n          } catch (error) {\n            console.error(`Error fetching subtitle for language ${subtitle.language}:`, error);\n          }\n        }));\n\n        // Set the subtitles state with the allSubtitles object\n        setSub(allSubtitles);\n        setSubtitles(subtitleFiles); // Set subtitles array here\n      } catch (error) {\n        console.error(\"Error fetching video data:\", error);\n      } finally {\n        setLoading(false); // Set loading to false when fetching is done\n        if (videoRef.current) {\n          videoRef.current.play(); // Resume playback if loading is done\n        }\n      }\n    };\n    if (selectedVideoID) {\n      fetchVideoData();\n    }\n  }, [selectedVideoID, setSub]);\n  const handleClick = () => {\n    if (videoRef.current) {\n      videoRef.current.pause(); // Pause the video when timestamp is clicked\n    }\n    setLoading(true); // Set loading to true while waiting for response\n  };\n  const videoKey = selectedVideoID ? `video-${selectedVideoID}` : \"\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main_vid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play_area\",\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"play_area\",\n        width: \"1000\",\n        height: \"500\",\n        controls: true,\n        ref: videoRef // Assign the ref to the video element\n        ,\n        children: [selectedVideo && /*#__PURE__*/_jsxDEV(\"source\", {\n          src: selectedVideo,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 39\n        }, this), subtitles.map((subtitle, index) => /*#__PURE__*/_jsxDEV(\"track\", {\n          src: subtitle.subtitle_file_url,\n          label: subtitle.language,\n          kind: \"subtitles\",\n          srcLang: subtitle.language,\n          default: index === 0\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this)), \"Your browser does not support the video tag.\"]\n      }, videoKey, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"title-playing\",\n      children: displayTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n_s(Vid, \"o9m4wW3YLcsJrBVKd32LvYUrkqA=\");\n_c = Vid;\nexport default Vid;\nvar _c;\n$RefreshReg$(_c, \"Vid\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","Vid","selectedVideoID","Title","setSub","_s","selectedVideo","setSelectedVideo","subtitles","setSubtitles","loading","setLoading","videoRef","displayTitle","fetchVideoData","response","get","data","video_url","allSubtitles","subtitleFiles","Promise","all","map","subtitle","subtitleResponse","language","base64Data","subtitle_file","binaryString","atob","binaryLength","length","bytes","Uint8Array","i","charCodeAt","blob","Blob","type","url","URL","createObjectURL","jsonSubtitles","JSON","parse","push","subtitle_file_url","error","console","current","play","handleClick","pause","videoKey","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","controls","ref","src","index","label","kind","srcLang","default","_c","$RefreshReg$"],"sources":["/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\n\nfunction Vid({ selectedVideoID, Title, setSub }) {\n    const [selectedVideo, setSelectedVideo] = useState(null);\n    const [subtitles, setSubtitles] = useState([]);\n    const [loading, setLoading] = useState(false); // Loading state\n    const videoRef = useRef(null); // Ref for the video element\n    const displayTitle = Title || \"None selected\";\n\n    useEffect(() => {\n        const fetchVideoData = async () => {\n            setSelectedVideo(null);\n            setSubtitles([]);\n            setLoading(true); // Set loading to true when starting to fetch\n\n            try {\n                const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n                setSelectedVideo(response.data.video_url);\n\n                const allSubtitles = {}; // Object to accumulate all subtitles\n                const subtitleFiles = []; // Array to store subtitle files\n\n                await Promise.all(\n                    response.data.subtitles.map(async (subtitle) => {\n                        try {\n                            const subtitleResponse = await axios.get(`http://localhost:8000/subtitles/${selectedVideoID}/${subtitle.language}/`);\n                            const base64Data = subtitleResponse.data.subtitle_file;\n\n                            const binaryString = atob(base64Data);\n                            const binaryLength = binaryString.length;\n                            const bytes = new Uint8Array(binaryLength);\n                            for (let i = 0; i < binaryLength; i++) {\n                                bytes[i] = binaryString.charCodeAt(i);\n                            }\n\n                            const blob = new Blob([bytes], { type: 'application/x-subrip' });\n                            const url = URL.createObjectURL(blob);\n\n                            // Store the JSON object of subtitles in the allSubtitles object\n                            const jsonSubtitles = JSON.parse(subtitleResponse.data.subtitle);\n                            allSubtitles[subtitle.language] = jsonSubtitles; // Add to the object by language\n\n                            // Push the subtitle info into the subtitleFiles array\n                            subtitleFiles.push({\n                                language: subtitle.language,\n                                subtitle_file_url: url,\n                            });\n\n                        } catch (error) {\n                            console.error(`Error fetching subtitle for language ${subtitle.language}:`, error);\n                        }\n                    })\n                );\n\n                // Set the subtitles state with the allSubtitles object\n                setSub(allSubtitles);\n                setSubtitles(subtitleFiles); // Set subtitles array here\n                \n            } catch (error) {\n                console.error(\"Error fetching video data:\", error);\n            } finally {\n                setLoading(false); // Set loading to false when fetching is done\n                if (videoRef.current) {\n                    videoRef.current.play(); // Resume playback if loading is done\n                }\n            }\n        };\n\n        if (selectedVideoID) {\n            fetchVideoData();\n        }\n    }, [selectedVideoID, setSub]);\n\n    const handleClick = () => {\n        if (videoRef.current) {\n            videoRef.current.pause(); // Pause the video when timestamp is clicked\n        }\n        setLoading(true); // Set loading to true while waiting for response\n    };\n\n    const videoKey = selectedVideoID ? `video-${selectedVideoID}` : \"\";\n\n    return (\n        <div className=\"main_vid\">\n            <div className=\"play_area\">\n                {loading && (\n                    <div className=\"loading-circle\">\n                        {/* Loading spinner or animation */}\n                    </div>\n                )}\n                <video\n                    className=\"play_area\"\n                    width=\"1000\"\n                    height=\"500\"\n                    controls\n                    key={videoKey}\n                    ref={videoRef} // Assign the ref to the video element\n                >\n                    {selectedVideo && <source src={selectedVideo} type=\"video/mp4\" />}\n                    {subtitles.map((subtitle, index) => (\n                        <track\n                            key={index}\n                            src={subtitle.subtitle_file_url}\n                            label={subtitle.language}\n                            kind=\"subtitles\"\n                            srcLang={subtitle.language}\n                            default={index === 0}\n                        />\n                    ))}\n                    Your browser does not support the video tag.\n                </video>\n            </div>\n            <header className=\"title-playing\">{displayTitle}</header>\n        </div>\n    );\n}\n\nexport default Vid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}