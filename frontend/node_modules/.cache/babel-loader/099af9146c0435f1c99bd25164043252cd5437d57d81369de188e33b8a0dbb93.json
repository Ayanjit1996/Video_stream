{"ast":null,"code":"var _jsxFileName = \"/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Vid({\n  selectedVideoID,\n  Title,\n  setSub\n}) {\n  _s();\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  const [subtitles, setSubtitles] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const videoRef = useRef(null);\n  const displayTitle = Title || \"None selected\";\n\n  // Function to fetch video and subtitle data\n  const fetchVideoData = async () => {\n    setLoading(true);\n    setSelectedVideo(null); // Clear previous video\n    setSubtitles([]); // Clear previous subtitles\n    setSub({}); // Clear previous subtitle data\n\n    try {\n      const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n      setSelectedVideo(response.data.video_url);\n      const allSubtitles = {};\n      const subtitleFiles = [];\n      await Promise.all(response.data.subtitles.map(async subtitle => {\n        try {\n          const subtitleResponse = await axios.get(`http://localhost:8000/subtitles/${selectedVideoID}/${subtitle.language}/`);\n          const base64Data = subtitleResponse.data.subtitle_file;\n          const binaryString = atob(base64Data);\n          const binaryLength = binaryString.length;\n          const bytes = new Uint8Array(binaryLength);\n          for (let i = 0; i < binaryLength; i++) {\n            bytes[i] = binaryString.charCodeAt(i);\n          }\n          const blob = new Blob([bytes], {\n            type: 'application/x-subrip'\n          });\n          const url = URL.createObjectURL(blob);\n          const jsonSubtitles = JSON.parse(subtitleResponse.data.subtitle);\n          allSubtitles[subtitle.language] = jsonSubtitles;\n          subtitleFiles.push({\n            language: subtitle.language,\n            subtitle_file_url: url\n          });\n        } catch (error) {\n          console.error(`Error fetching subtitle for language ${subtitle.language}:`, error);\n        }\n      }));\n      setSub(allSubtitles);\n      setSubtitles(subtitleFiles);\n    } catch (error) {\n      console.error(\"Error fetching video data:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    if (selectedVideoID) {\n      fetchVideoData(); // Fetch new video and subtitles when video ID changes\n    }\n  }, [selectedVideoID]);\n  useEffect(() => {\n    // Cleanup effect: pause video and reset time on unmount or when changing video\n    if (videoRef.current) {\n      videoRef.current.pause();\n      videoRef.current.currentTime = 0;\n    }\n  }, [selectedVideo]);\n  const videoKey = selectedVideoID ? `video-${selectedVideoID}` : \"\";\n  const handleCustomSeek = timestamp => {\n    if (videoRef.current) {\n      videoRef.current.pause();\n      setLoading(true); // Show loading state\n      videoRef.current.currentTime = timestamp; // Seek to timestamp\n      videoRef.current.play(); // Play the video again\n      setLoading(false); // Hide loading state when done\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main_vid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play_area\",\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-circle\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"play_area\",\n        width: \"1000\",\n        height: \"500\",\n        controls: true,\n        // Ensure the key changes with video ID\n        ref: videoRef,\n        preload: \"auto\",\n        children: [selectedVideo && /*#__PURE__*/_jsxDEV(\"source\", {\n          src: selectedVideo,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 39\n        }, this), subtitles.map((subtitle, index) => /*#__PURE__*/_jsxDEV(\"track\", {\n          src: subtitle.subtitle_file_url,\n          label: subtitle.language,\n          kind: \"subtitles\",\n          srcLang: subtitle.language,\n          default: subtitle.language === \"eng\" // Set default to English\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this)), \"Your browser does not support the video tag.\"]\n      }, videoKey, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleCustomSeek(30),\n      children: \"Seek to 30 seconds\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"title-playing\",\n      children: displayTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n_s(Vid, \"zDNpu/tRMUntiNOqWy98urh5xM0=\");\n_c = Vid;\nexport default Vid;\nvar _c;\n$RefreshReg$(_c, \"Vid\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","Vid","selectedVideoID","Title","setSub","_s","selectedVideo","setSelectedVideo","subtitles","setSubtitles","loading","setLoading","videoRef","displayTitle","fetchVideoData","response","get","data","video_url","allSubtitles","subtitleFiles","Promise","all","map","subtitle","subtitleResponse","language","base64Data","subtitle_file","binaryString","atob","binaryLength","length","bytes","Uint8Array","i","charCodeAt","blob","Blob","type","url","URL","createObjectURL","jsonSubtitles","JSON","parse","push","subtitle_file_url","error","console","current","pause","currentTime","videoKey","handleCustomSeek","timestamp","play","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","controls","ref","preload","src","index","label","kind","srcLang","default","onClick","_c","$RefreshReg$"],"sources":["/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\n\nfunction Vid({ selectedVideoID, Title, setSub }) {\n    const [selectedVideo, setSelectedVideo] = useState(null);\n    const [subtitles, setSubtitles] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const videoRef = useRef(null);\n    const displayTitle = Title || \"None selected\";\n\n    // Function to fetch video and subtitle data\n    const fetchVideoData = async () => {\n        setLoading(true);\n        setSelectedVideo(null); // Clear previous video\n        setSubtitles([]); // Clear previous subtitles\n        setSub({}); // Clear previous subtitle data\n\n        try {\n            const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n            setSelectedVideo(response.data.video_url);\n\n            const allSubtitles = {};\n            const subtitleFiles = [];\n\n            await Promise.all(\n                response.data.subtitles.map(async (subtitle) => {\n                    try {\n                        const subtitleResponse = await axios.get(`http://localhost:8000/subtitles/${selectedVideoID}/${subtitle.language}/`);\n                        const base64Data = subtitleResponse.data.subtitle_file;\n                        const binaryString = atob(base64Data);\n                        const binaryLength = binaryString.length;\n                        const bytes = new Uint8Array(binaryLength);\n                        for (let i = 0; i < binaryLength; i++) {\n                            bytes[i] = binaryString.charCodeAt(i);\n                        }\n                        const blob = new Blob([bytes], { type: 'application/x-subrip' });\n                        const url = URL.createObjectURL(blob);\n                        const jsonSubtitles = JSON.parse(subtitleResponse.data.subtitle);\n                        allSubtitles[subtitle.language] = jsonSubtitles;\n                        subtitleFiles.push({ language: subtitle.language, subtitle_file_url: url });\n                    } catch (error) {\n                        console.error(`Error fetching subtitle for language ${subtitle.language}:`, error);\n                    }\n                })\n            );\n\n            setSub(allSubtitles);\n            setSubtitles(subtitleFiles);\n        } catch (error) {\n            console.error(\"Error fetching video data:\", error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        if (selectedVideoID) {\n            fetchVideoData(); // Fetch new video and subtitles when video ID changes\n        }\n    }, [selectedVideoID]);\n\n    useEffect(() => {\n        // Cleanup effect: pause video and reset time on unmount or when changing video\n        if (videoRef.current) {\n            videoRef.current.pause();\n            videoRef.current.currentTime = 0;\n        }\n    }, [selectedVideo]);\n\n    const videoKey = selectedVideoID ? `video-${selectedVideoID}` : \"\";\n\n    const handleCustomSeek = (timestamp) => {\n        if (videoRef.current) {\n            videoRef.current.pause();\n            setLoading(true); // Show loading state\n            videoRef.current.currentTime = timestamp; // Seek to timestamp\n            videoRef.current.play(); // Play the video again\n            setLoading(false); // Hide loading state when done\n        }\n    };\n\n    return (\n        <div className=\"main_vid\">\n            <div className=\"play_area\">\n                {loading && (\n                    <div className=\"loading-circle\">Loading...</div>\n                )}\n                <video\n                    className=\"play_area\"\n                    width=\"1000\"\n                    height=\"500\"\n                    controls\n                    key={videoKey} // Ensure the key changes with video ID\n                    ref={videoRef}\n                    preload=\"auto\"\n                >\n                    {selectedVideo && <source src={selectedVideo} type=\"video/mp4\" />}\n                    {subtitles.map((subtitle, index) => (\n                        <track\n                            key={index}\n                            src={subtitle.subtitle_file_url}\n                            label={subtitle.language}\n                            kind=\"subtitles\"\n                            srcLang={subtitle.language}\n                            default={subtitle.language === \"eng\"} // Set default to English\n                        />\n                    ))}\n                    Your browser does not support the video tag.\n                </video>\n            </div>\n            <button onClick={() => handleCustomSeek(30)}>Seek to 30 seconds</button>\n            <header className=\"title-playing\">{displayTitle}</header>\n        </div>\n    );\n}\n\nexport default Vid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}