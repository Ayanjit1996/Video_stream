{"ast":null,"code":"var _jsxFileName = \"/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport Subtitle from \"./Subtitle\"; // Import the Subtitle component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Vid({\n  selectedVideoID,\n  Title,\n  setSub\n}) {\n  _s();\n  const [subtitles, setSubtitles] = useState([]); // subtitle files in video format\n  const [allSubtitles, setAllSubtitles] = useState({}); // subtitle data (JSON)\n  const [loading, setLoading] = useState(false);\n  const videoRef = useRef(null);\n  const displayTitle = Title || \"None selected\";\n  useEffect(() => {\n    const fetchVideoData = async () => {\n      if (!selectedVideoID) return;\n      setLoading(true);\n      try {\n        const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n        const videoUrl = response.data.video_url;\n\n        // Set the video source and load it\n        if (videoRef.current) {\n          videoRef.current.src = videoUrl;\n          videoRef.current.load(); // Refresh the video element\n        }\n        const subtitlesData = {};\n        const subtitleFiles = [];\n        await Promise.all(response.data.subtitles.map(async subtitle => {\n          try {\n            const subtitleResponse = await axios.get(`http://localhost:8000/subtitles/${selectedVideoID}/${subtitle.language}/`);\n            const base64Data = subtitleResponse.data.subtitle_file;\n            const binaryString = atob(base64Data);\n            const binaryLength = binaryString.length;\n            const bytes = new Uint8Array(binaryLength);\n            for (let i = 0; i < binaryLength; i++) {\n              bytes[i] = binaryString.charCodeAt(i);\n            }\n            const blob = new Blob([bytes], {\n              type: 'application/x-subrip'\n            });\n            const url = URL.createObjectURL(blob);\n            const jsonSubtitles = JSON.parse(subtitleResponse.data.subtitle); // Parse the subtitle JSON\n            subtitlesData[subtitle.language] = jsonSubtitles; // Save subtitles in selected language\n            subtitleFiles.push({\n              language: subtitle.language,\n              subtitle_file_url: url\n            });\n          } catch (error) {\n            console.error(`Error fetching subtitle for language ${subtitle.language}:`, error);\n          }\n        }));\n        setAllSubtitles(subtitlesData); // Set JSON subtitle data\n        setSub(subtitlesData); // Call setSub passed as prop to update subtitles\n        setSubtitles(subtitleFiles); // Set subtitle files for video tracks\n      } catch (error) {\n        console.error(\"Error fetching video data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchVideoData();\n  }, [selectedVideoID, setSub]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main_vid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play_area\",\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-circle\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"play_area\",\n        width: \"1000\",\n        height: \"500\",\n        controls: true,\n        ref: videoRef,\n        preload: \"auto\",\n        onError: error => console.error(\"Error loading video:\", error),\n        children: [subtitles.map((subtitle, index) => /*#__PURE__*/_jsxDEV(\"track\", {\n          src: subtitle.subtitle_file_url,\n          label: subtitle.language,\n          kind: \"subtitles\",\n          srcLang: subtitle.language,\n          default: subtitle.language === \"eng\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)), \"Your browser does not support the video tag.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"title-playing\",\n      children: displayTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Subtitle, {\n      sub: allSubtitles // Pass the parsed subtitle data as prop\n      ,\n      selectedVideoID: selectedVideoID,\n      videoRef: videoRef // Pass the videoRef for seeking\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n_s(Vid, \"eJEqonDhDNYjkoUO9XfZDHXKAJ0=\");\n_c = Vid;\nexport default Vid;\nvar _c;\n$RefreshReg$(_c, \"Vid\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","Subtitle","jsxDEV","_jsxDEV","Vid","selectedVideoID","Title","setSub","_s","subtitles","setSubtitles","allSubtitles","setAllSubtitles","loading","setLoading","videoRef","displayTitle","fetchVideoData","response","get","videoUrl","data","video_url","current","src","load","subtitlesData","subtitleFiles","Promise","all","map","subtitle","subtitleResponse","language","base64Data","subtitle_file","binaryString","atob","binaryLength","length","bytes","Uint8Array","i","charCodeAt","blob","Blob","type","url","URL","createObjectURL","jsonSubtitles","JSON","parse","push","subtitle_file_url","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","controls","ref","preload","onError","index","label","kind","srcLang","default","sub","_c","$RefreshReg$"],"sources":["/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport Subtitle from \"./Subtitle\";  // Import the Subtitle component\n\nfunction Vid({ selectedVideoID, Title, setSub }) {\n    const [subtitles, setSubtitles] = useState([]); // subtitle files in video format\n    const [allSubtitles, setAllSubtitles] = useState({}); // subtitle data (JSON)\n    const [loading, setLoading] = useState(false);\n    const videoRef = useRef(null);\n    const displayTitle = Title || \"None selected\";\n\n    useEffect(() => {\n        const fetchVideoData = async () => {\n            if (!selectedVideoID) return;\n\n            setLoading(true);\n            try {\n                const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n                const videoUrl = response.data.video_url;\n\n                // Set the video source and load it\n                if (videoRef.current) {\n                    videoRef.current.src = videoUrl;\n                    videoRef.current.load(); // Refresh the video element\n                }\n\n                const subtitlesData = {};\n                const subtitleFiles = [];\n\n                await Promise.all(\n                    response.data.subtitles.map(async (subtitle) => {\n                        try {\n                            const subtitleResponse = await axios.get(`http://localhost:8000/subtitles/${selectedVideoID}/${subtitle.language}/`);\n                            const base64Data = subtitleResponse.data.subtitle_file;\n                            const binaryString = atob(base64Data);\n                            const binaryLength = binaryString.length;\n                            const bytes = new Uint8Array(binaryLength);\n                            for (let i = 0; i < binaryLength; i++) {\n                                bytes[i] = binaryString.charCodeAt(i);\n                            }\n                            const blob = new Blob([bytes], { type: 'application/x-subrip' });\n                            const url = URL.createObjectURL(blob);\n                            const jsonSubtitles = JSON.parse(subtitleResponse.data.subtitle); // Parse the subtitle JSON\n                            subtitlesData[subtitle.language] = jsonSubtitles; // Save subtitles in selected language\n                            subtitleFiles.push({ language: subtitle.language, subtitle_file_url: url });\n                        } catch (error) {\n                            console.error(`Error fetching subtitle for language ${subtitle.language}:`, error);\n                        }\n                    })\n                );\n\n                setAllSubtitles(subtitlesData);  // Set JSON subtitle data\n                setSub(subtitlesData);           // Call setSub passed as prop to update subtitles\n                setSubtitles(subtitleFiles);     // Set subtitle files for video tracks\n            } catch (error) {\n                console.error(\"Error fetching video data:\", error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchVideoData();\n    }, [selectedVideoID, setSub]);\n\n    return (\n        <div className=\"main_vid\">\n            <div className=\"play_area\">\n                {loading && <div className=\"loading-circle\">Loading...</div>}\n                <video\n                    className=\"play_area\"\n                    width=\"1000\"\n                    height=\"500\"\n                    controls\n                    ref={videoRef}\n                    preload=\"auto\"\n                    onError={(error) => console.error(\"Error loading video:\", error)}\n                >\n                    {subtitles.map((subtitle, index) => (\n                        <track\n                            key={index}\n                            src={subtitle.subtitle_file_url}\n                            label={subtitle.language}\n                            kind=\"subtitles\"\n                            srcLang={subtitle.language}\n                            default={subtitle.language === \"eng\"}\n                        />\n                    ))}\n                    Your browser does not support the video tag.\n                </video>\n            </div>\n            <header className=\"title-playing\">{displayTitle}</header>\n            \n            {/* Pass the JSON subtitle data and videoRef */}\n            <Subtitle \n                sub={allSubtitles}  // Pass the parsed subtitle data as prop\n                selectedVideoID={selectedVideoID}\n                videoRef={videoRef}  // Pass the videoRef for seeking\n            />\n        </div>\n    );\n}\n\nexport default Vid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}