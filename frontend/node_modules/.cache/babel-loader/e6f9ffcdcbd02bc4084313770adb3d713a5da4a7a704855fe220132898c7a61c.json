{"ast":null,"code":"var _jsxFileName = \"/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport ReactPlayer from 'react-player';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Vid({\n  selectedVideoID,\n  Title,\n  setSub,\n  seconds,\n  setSeconds\n}) {\n  _s();\n  const [subtitles, setSubtitles] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [videoUrl, setVideoUrl] = useState('');\n  const playerRef = useRef(null);\n  const displayTitle = Title || \"None selected\";\n  useEffect(() => {\n    const fetchVideoData = async () => {\n      if (!selectedVideoID) return;\n      setLoading(true);\n      try {\n        const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n        const fetchedVideoUrl = response.data.video_url;\n        setVideoUrl(fetchedVideoUrl);\n\n        // Load subtitles\n        await loadSubtitles(response.data.subtitles);\n\n        // If seconds are provided, reset them for seeking\n        if (seconds) {\n          setSeconds(null); // Reset seconds\n        }\n      } catch (error) {\n        console.error(\"Error fetching video data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchVideoData();\n  }, [selectedVideoID, setSub, seconds]);\n  const loadSubtitles = async subtitlesArray => {\n    const subtitleFiles = [];\n    await Promise.all(subtitlesArray.map(async subtitle => {\n      try {\n        const subtitleResponse = await axios.get(`http://localhost:8000/subtitles/${selectedVideoID}/${subtitle.language}/`);\n        const base64Data = subtitleResponse.data.subtitle_file;\n        const binaryString = atob(base64Data);\n        const binaryLength = binaryString.length;\n        const bytes = new Uint8Array(binaryLength);\n        for (let i = 0; i < binaryLength; i++) {\n          bytes[i] = binaryString.charCodeAt(i);\n        }\n        const blob = new Blob([bytes], {\n          type: 'application/x-subrip'\n        });\n        const url = URL.createObjectURL(blob);\n        subtitleFiles.push({\n          language: subtitle.language,\n          subtitle_file_url: url\n        });\n      } catch (error) {\n        console.error(`Error fetching subtitle for language ${subtitle.language}:`, error);\n      }\n    }));\n    setSub(subtitleFiles); // You can adjust how you store the subtitles based on your needs\n    setSubtitles(subtitleFiles);\n  };\n  const handleReady = () => {\n    if (seconds) {\n      playerRef.current.seekTo(seconds); // Seek to the provided seconds\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main_vid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play_area\",\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-circle\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(ReactPlayer, {\n        ref: playerRef,\n        url: videoUrl,\n        width: \"1000px\",\n        height: \"500px\",\n        controls: true,\n        onReady: handleReady,\n        config: {\n          file: {\n            tracks: subtitles.map(subtitle => ({\n              kind: 'subtitles',\n              src: subtitle.subtitle_file_url,\n              srcLang: subtitle.language,\n              label: subtitle.language,\n              default: subtitle.language === \"eng\" // Change this based on your default logic\n            }))\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"title-playing\",\n      children: displayTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n_s(Vid, \"qzU7pyf1S3ur0KRVxHQNreUx5mE=\");\n_c = Vid;\nexport default Vid;\nvar _c;\n$RefreshReg$(_c, \"Vid\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","ReactPlayer","jsxDEV","_jsxDEV","Vid","selectedVideoID","Title","setSub","seconds","setSeconds","_s","subtitles","setSubtitles","loading","setLoading","videoUrl","setVideoUrl","playerRef","displayTitle","fetchVideoData","response","get","fetchedVideoUrl","data","video_url","loadSubtitles","error","console","subtitlesArray","subtitleFiles","Promise","all","map","subtitle","subtitleResponse","language","base64Data","subtitle_file","binaryString","atob","binaryLength","length","bytes","Uint8Array","i","charCodeAt","blob","Blob","type","url","URL","createObjectURL","push","subtitle_file_url","handleReady","current","seekTo","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","width","height","controls","onReady","config","file","tracks","kind","src","srcLang","label","default","_c","$RefreshReg$"],"sources":["/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport ReactPlayer from 'react-player';\n\nfunction Vid({ selectedVideoID, Title, setSub, seconds, setSeconds }) {\n    const [subtitles, setSubtitles] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [videoUrl, setVideoUrl] = useState('');\n    const playerRef = useRef(null);\n    const displayTitle = Title || \"None selected\";\n\n    useEffect(() => {\n        const fetchVideoData = async () => {\n            if (!selectedVideoID) return;\n\n            setLoading(true);\n            try {\n                const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n                const fetchedVideoUrl = response.data.video_url;\n\n                setVideoUrl(fetchedVideoUrl);\n\n                // Load subtitles\n                await loadSubtitles(response.data.subtitles);\n                \n                // If seconds are provided, reset them for seeking\n                if (seconds) {\n                    setSeconds(null); // Reset seconds\n                }\n            } catch (error) {\n                console.error(\"Error fetching video data:\", error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchVideoData();\n    }, [selectedVideoID, setSub, seconds]);\n\n    const loadSubtitles = async (subtitlesArray) => {\n        const subtitleFiles = [];\n\n        await Promise.all(\n            subtitlesArray.map(async (subtitle) => {\n                try {\n                    const subtitleResponse = await axios.get(`http://localhost:8000/subtitles/${selectedVideoID}/${subtitle.language}/`);\n                    const base64Data = subtitleResponse.data.subtitle_file;\n                    const binaryString = atob(base64Data);\n                    const binaryLength = binaryString.length;\n                    const bytes = new Uint8Array(binaryLength);\n                    for (let i = 0; i < binaryLength; i++) {\n                        bytes[i] = binaryString.charCodeAt(i);\n                    }\n                    const blob = new Blob([bytes], { type: 'application/x-subrip' });\n                    const url = URL.createObjectURL(blob);\n                    subtitleFiles.push({ language: subtitle.language, subtitle_file_url: url });\n                } catch (error) {\n                    console.error(`Error fetching subtitle for language ${subtitle.language}:`, error);\n                }\n            })\n        );\n\n        setSub(subtitleFiles); // You can adjust how you store the subtitles based on your needs\n        setSubtitles(subtitleFiles);\n    };\n\n    const handleReady = () => {\n        if (seconds) {\n            playerRef.current.seekTo(seconds); // Seek to the provided seconds\n        }\n    };\n\n    return (\n        <div className=\"main_vid\">\n            <div className=\"play_area\">\n                {loading && <div className=\"loading-circle\">Loading...</div>}\n                <ReactPlayer\n                    ref={playerRef}\n                    url={videoUrl}\n                    width=\"1000px\"\n                    height=\"500px\"\n                    controls\n                    onReady={handleReady}\n                    config={{\n                        file: {\n                            tracks: subtitles.map(subtitle => ({\n                                kind: 'subtitles',\n                                src: subtitle.subtitle_file_url,\n                                srcLang: subtitle.language,\n                                label: subtitle.language,\n                                default: subtitle.language === \"eng\" // Change this based on your default logic\n                            }))\n                        }\n                    }}\n                />\n            </div>\n            <header className=\"title-playing\">{displayTitle}</header>\n        </div>\n    );\n}\n\nexport default Vid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}