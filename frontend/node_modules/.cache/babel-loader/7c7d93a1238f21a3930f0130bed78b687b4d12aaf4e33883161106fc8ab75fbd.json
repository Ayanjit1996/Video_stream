{"ast":null,"code":"var _jsxFileName = \"/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Vid({\n  selectedVideoID,\n  Title,\n  setSub,\n  seconds,\n  setSeconds\n}) {\n  _s();\n  const [subtitles, setSubtitles] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const videoRef = useRef(null);\n  const displayTitle = Title || \"None selected\";\n  useEffect(() => {\n    const fetchVideoData = async () => {\n      if (!selectedVideoID) return;\n      setLoading(true);\n      try {\n        const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n        const videoUrl = response.data.video_url;\n\n        // Load subtitles\n        await loadSubtitles(response.data.subtitles);\n\n        // If seconds are provided, fetch video stream\n        if (seconds) {\n          await fetchVideoStream(seconds);\n        } else {\n          // Set the video URL if it's different\n          if (videoRef.current && videoRef.current.src !== videoUrl) {\n            videoRef.current.src = videoUrl;\n            videoRef.current.load();\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching video data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchVideoData();\n    return () => {\n      if (videoRef.current && videoRef.current.src) {\n        URL.revokeObjectURL(videoRef.current.src);\n      }\n    };\n  }, [selectedVideoID, setSub, seconds]);\n  const loadSubtitles = async subtitlesArray => {\n    const allSubtitles = {};\n    const subtitleFiles = [];\n    await Promise.all(subtitlesArray.map(async subtitle => {\n      try {\n        const subtitleResponse = await axios.get(`http://localhost:8000/subtitles/${selectedVideoID}/${subtitle.language}/`);\n        const base64Data = subtitleResponse.data.subtitle_file;\n        const binaryString = atob(base64Data);\n        const binaryLength = binaryString.length;\n        const bytes = new Uint8Array(binaryLength);\n        for (let i = 0; i < binaryLength; i++) {\n          bytes[i] = binaryString.charCodeAt(i);\n        }\n        const blob = new Blob([bytes], {\n          type: 'application/x-subrip'\n        });\n        const url = URL.createObjectURL(blob);\n        allSubtitles[subtitle.language] = JSON.parse(subtitleResponse.data.subtitle);\n        subtitleFiles.push({\n          language: subtitle.language,\n          subtitle_file_url: url\n        });\n      } catch (error) {\n        console.error(`Error fetching subtitle for language ${subtitle.language}:`, error);\n      }\n    }));\n    setSub(allSubtitles);\n    setSubtitles(subtitleFiles);\n  };\n  const fetchVideoStream = async seconds => {\n    if (loading || !videoRef.current) return; // Prevent multiple concurrent fetches\n\n    const byteRange = calculateByteRange(seconds);\n    try {\n      const streamResponse = await axios.post(`http://localhost:8000/stream/${selectedVideoID}/`, null, {\n        headers: {\n          'Range': byteRange\n        },\n        // Correct header name\n        responseType: 'blob'\n      });\n      const videoBlobUrl = URL.createObjectURL(streamResponse.data);\n      console.log(\"Blob URL:\", videoBlobUrl);\n      console.log(\"Blob type:\", streamResponse.data.type);\n\n      // Only change the source if it's a valid video blob\n      if (streamResponse.data.type.startsWith('video/')) {\n        videoRef.current.pause();\n        videoRef.current.src = videoBlobUrl;\n        videoRef.current.currentTime = seconds;\n        videoRef.current.play();\n        setSeconds(null);\n      } else {\n        console.error(\"Received invalid video blob type:\", streamResponse.data.type);\n      }\n    } catch (error) {\n      console.error(\"Error fetching video stream:\", error);\n    }\n  };\n  const calculateByteRange = seconds => {\n    const bytesPerSecond = 1024; // Adjust based on your video's bitrate\n    const startByte = seconds * bytesPerSecond;\n    const endByte = startByte + bytesPerSecond - 1; // Request the next second of video\n    return `bytes=${startByte}-${endByte}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main_vid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play_area\",\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-circle\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"play_area\",\n        width: \"1000\",\n        height: \"500\",\n        controls: true,\n        ref: videoRef,\n        preload: \"auto\",\n        onLoadedMetadata: () => {\n          videoRef.current.controls = true;\n        },\n        onError: error => console.error(\"Error loading video:\", error),\n        children: [subtitles.map((subtitle, index) => /*#__PURE__*/_jsxDEV(\"track\", {\n          src: subtitle.subtitle_file_url,\n          label: subtitle.language,\n          kind: \"subtitles\",\n          srcLang: subtitle.language,\n          default: subtitle.language === \"eng\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this)), \"Your browser does not support the video tag.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"title-playing\",\n      children: displayTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n}\n_s(Vid, \"qV6jh9aZgucUjo/cRa2tl5FWQU8=\");\n_c = Vid;\nexport default Vid;\nvar _c;\n$RefreshReg$(_c, \"Vid\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","Vid","selectedVideoID","Title","setSub","seconds","setSeconds","_s","subtitles","setSubtitles","loading","setLoading","videoRef","displayTitle","fetchVideoData","response","get","videoUrl","data","video_url","loadSubtitles","fetchVideoStream","current","src","load","error","console","URL","revokeObjectURL","subtitlesArray","allSubtitles","subtitleFiles","Promise","all","map","subtitle","subtitleResponse","language","base64Data","subtitle_file","binaryString","atob","binaryLength","length","bytes","Uint8Array","i","charCodeAt","blob","Blob","type","url","createObjectURL","JSON","parse","push","subtitle_file_url","byteRange","calculateByteRange","streamResponse","post","headers","responseType","videoBlobUrl","log","startsWith","pause","currentTime","play","bytesPerSecond","startByte","endByte","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","controls","ref","preload","onLoadedMetadata","onError","index","label","kind","srcLang","default","_c","$RefreshReg$"],"sources":["/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\n\nfunction Vid({ selectedVideoID, Title, setSub, seconds, setSeconds }) {\n    const [subtitles, setSubtitles] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const videoRef = useRef(null);\n    const displayTitle = Title || \"None selected\";\n\n    useEffect(() => {\n        const fetchVideoData = async () => {\n            if (!selectedVideoID) return;\n\n            setLoading(true);\n            try {\n                const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n                const videoUrl = response.data.video_url;\n\n                // Load subtitles\n                await loadSubtitles(response.data.subtitles);\n\n                // If seconds are provided, fetch video stream\n                if (seconds) {\n                    await fetchVideoStream(seconds);\n                } else {\n                    // Set the video URL if it's different\n                    if (videoRef.current && videoRef.current.src !== videoUrl) {\n                        videoRef.current.src = videoUrl;\n                        videoRef.current.load();\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error fetching video data:\", error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchVideoData();\n\n        return () => {\n            if (videoRef.current && videoRef.current.src) {\n                URL.revokeObjectURL(videoRef.current.src);\n            }\n        };\n    }, [selectedVideoID, setSub, seconds]);\n\n    const loadSubtitles = async (subtitlesArray) => {\n        const allSubtitles = {};\n        const subtitleFiles = [];\n\n        await Promise.all(\n            subtitlesArray.map(async (subtitle) => {\n                try {\n                    const subtitleResponse = await axios.get(`http://localhost:8000/subtitles/${selectedVideoID}/${subtitle.language}/`);\n                    const base64Data = subtitleResponse.data.subtitle_file;\n                    const binaryString = atob(base64Data);\n                    const binaryLength = binaryString.length;\n                    const bytes = new Uint8Array(binaryLength);\n                    for (let i = 0; i < binaryLength; i++) {\n                        bytes[i] = binaryString.charCodeAt(i);\n                    }\n                    const blob = new Blob([bytes], { type: 'application/x-subrip' });\n                    const url = URL.createObjectURL(blob);\n                    allSubtitles[subtitle.language] = JSON.parse(subtitleResponse.data.subtitle);\n                    subtitleFiles.push({ language: subtitle.language, subtitle_file_url: url });\n                } catch (error) {\n                    console.error(`Error fetching subtitle for language ${subtitle.language}:`, error);\n                }\n            })\n        );\n\n        setSub(allSubtitles);\n        setSubtitles(subtitleFiles);\n    };\n\n    const fetchVideoStream = async (seconds) => {\n        if (loading || !videoRef.current) return; // Prevent multiple concurrent fetches\n\n        const byteRange = calculateByteRange(seconds);\n        try {\n            const streamResponse = await axios.post(`http://localhost:8000/stream/${selectedVideoID}/`, null, {\n                headers: { 'Range': byteRange }, // Correct header name\n                responseType: 'blob'\n            });\n\n            const videoBlobUrl = URL.createObjectURL(streamResponse.data);\n            console.log(\"Blob URL:\", videoBlobUrl);\n            console.log(\"Blob type:\", streamResponse.data.type);\n\n            // Only change the source if it's a valid video blob\n            if (streamResponse.data.type.startsWith('video/')) {\n                videoRef.current.pause();\n                videoRef.current.src = videoBlobUrl; \n                videoRef.current.currentTime = seconds; \n                videoRef.current.play();\n                setSeconds(null); \n            } else {\n                console.error(\"Received invalid video blob type:\", streamResponse.data.type);\n            }\n        } catch (error) {\n            console.error(\"Error fetching video stream:\", error);\n        }\n    };\n\n    const calculateByteRange = (seconds) => {\n        const bytesPerSecond = 1024; // Adjust based on your video's bitrate\n        const startByte = seconds * bytesPerSecond;\n        const endByte = startByte + bytesPerSecond - 1; // Request the next second of video\n        return `bytes=${startByte}-${endByte}`;\n    };\n\n    return (\n        <div className=\"main_vid\">\n            <div className=\"play_area\">\n                {loading && <div className=\"loading-circle\">Loading...</div>}\n                <video\n                    className=\"play_area\"\n                    width=\"1000\"\n                    height=\"500\"\n                    controls\n                    ref={videoRef}\n                    preload=\"auto\"\n                    onLoadedMetadata={() => {\n                        videoRef.current.controls = true;\n                    }}\n                    onError={(error) => console.error(\"Error loading video:\", error)}\n                >\n                    {subtitles.map((subtitle, index) => (\n                        <track\n                            key={index}\n                            src={subtitle.subtitle_file_url}\n                            label={subtitle.language}\n                            kind=\"subtitles\"\n                            srcLang={subtitle.language}\n                            default={subtitle.language === \"eng\"}\n                        />\n                    ))}\n                    Your browser does not support the video tag.\n                </video>\n            </div>\n            <header className=\"title-playing\">{displayTitle}</header>\n        </div>\n    );\n}\n\nexport default Vid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}