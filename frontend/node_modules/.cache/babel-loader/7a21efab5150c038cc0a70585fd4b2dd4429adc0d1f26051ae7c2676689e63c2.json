{"ast":null,"code":"var _jsxFileName = \"/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Vid({\n  selectedVideoID,\n  Title,\n  setSub,\n  seconds\n}) {\n  _s();\n  const [subtitles, setSubtitles] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const videoRef = useRef(null);\n  const displayTitle = Title || \"None selected\";\n  useEffect(() => {\n    const fetchVideoData = async () => {\n      if (!selectedVideoID) return;\n      setLoading(true);\n      try {\n        // Fetch video metadata and URL\n        const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n        const videoUrl = response.data.video_url;\n\n        // Set the video source for streaming\n        if (videoRef.current) {\n          videoRef.current.src = videoUrl; // Set the initial URL to start playing\n          videoRef.current.load(); // Load the new video source\n        }\n        const allSubtitles = {};\n        const subtitleFiles = [];\n\n        // Fetch subtitles\n        await Promise.all(response.data.subtitles.map(async subtitle => {\n          try {\n            const subtitleResponse = await axios.get(`http://localhost:8000/subtitles/${selectedVideoID}/${subtitle.language}/`);\n            const base64Data = subtitleResponse.data.subtitle_file;\n            const binaryString = atob(base64Data);\n            const binaryLength = binaryString.length;\n            const bytes = new Uint8Array(binaryLength);\n            for (let i = 0; i < binaryLength; i++) {\n              bytes[i] = binaryString.charCodeAt(i);\n            }\n            const blob = new Blob([bytes], {\n              type: 'application/x-subrip'\n            });\n            const url = URL.createObjectURL(blob);\n            allSubtitles[subtitle.language] = JSON.parse(subtitleResponse.data.subtitle);\n            subtitleFiles.push({\n              language: subtitle.language,\n              subtitle_file_url: url\n            });\n          } catch (error) {\n            console.error(`Error fetching subtitle for language ${subtitle.language}:`, error);\n          }\n        }));\n        setSub(allSubtitles);\n        setSubtitles(subtitleFiles);\n\n        // Request video portion for streaming based on the provided seconds\n        if (seconds) {\n          const byteRange = calculateByteRange(seconds);\n          const streamResponse = await axios.post(`http://localhost:8000/stream/${selectedVideoID}/`, null, {\n            headers: {\n              'Range': byteRange\n            },\n            responseType: 'blob'\n          });\n\n          // Create a URL for the blob response and set it as the video source\n          const videoBlobUrl = URL.createObjectURL(streamResponse.data);\n          videoRef.current.src = videoBlobUrl;\n          videoRef.current.currentTime = seconds; // Seek to the specific timestamp\n          videoRef.current.play();\n        }\n      } catch (error) {\n        console.error(\"Error fetching video data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchVideoData();\n  }, [selectedVideoID, setSub, seconds]);\n  const calculateByteRange = seconds => {\n    const bytesPerSecond = 1024; // Adjust this based on your video's bitrate\n    const startByte = seconds * bytesPerSecond;\n    const endByte = startByte + bytesPerSecond - 1; // Requesting the next second of video\n    return `bytes=${startByte}-${endByte}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main_vid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play_area\",\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-circle\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"play_area\",\n        width: \"1000\",\n        height: \"500\",\n        controls: true,\n        ref: videoRef,\n        preload: \"auto\",\n        onLoadedMetadata: () => {\n          videoRef.current.controls = true;\n        },\n        onError: error => console.error(\"Error loading video:\", error),\n        children: [subtitles.map((subtitle, index) => /*#__PURE__*/_jsxDEV(\"track\", {\n          src: subtitle.subtitle_file_url,\n          label: subtitle.language,\n          kind: \"subtitles\",\n          srcLang: subtitle.language,\n          default: subtitle.language === \"eng\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this)), \"Your browser does not support the video tag.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"title-playing\",\n      children: displayTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n_s(Vid, \"qV6jh9aZgucUjo/cRa2tl5FWQU8=\");\n_c = Vid;\nexport default Vid;\nvar _c;\n$RefreshReg$(_c, \"Vid\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","Vid","selectedVideoID","Title","setSub","seconds","_s","subtitles","setSubtitles","loading","setLoading","videoRef","displayTitle","fetchVideoData","response","get","videoUrl","data","video_url","current","src","load","allSubtitles","subtitleFiles","Promise","all","map","subtitle","subtitleResponse","language","base64Data","subtitle_file","binaryString","atob","binaryLength","length","bytes","Uint8Array","i","charCodeAt","blob","Blob","type","url","URL","createObjectURL","JSON","parse","push","subtitle_file_url","error","console","byteRange","calculateByteRange","streamResponse","post","headers","responseType","videoBlobUrl","currentTime","play","bytesPerSecond","startByte","endByte","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","controls","ref","preload","onLoadedMetadata","onError","index","label","kind","srcLang","default","_c","$RefreshReg$"],"sources":["/Users/ayanjitdutta/Desktop/assignment/frntend/src/video_section.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\n\nfunction Vid({ selectedVideoID, Title, setSub, seconds }) {\n    const [subtitles, setSubtitles] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const videoRef = useRef(null);\n    const displayTitle = Title || \"None selected\";\n\n    useEffect(() => {\n        const fetchVideoData = async () => {\n            if (!selectedVideoID) return;\n\n            setLoading(true);\n            try {\n                // Fetch video metadata and URL\n                const response = await axios.get(`http://localhost:8000/play/${selectedVideoID}/`);\n                const videoUrl = response.data.video_url;\n\n                // Set the video source for streaming\n                if (videoRef.current) {\n                    videoRef.current.src = videoUrl; // Set the initial URL to start playing\n                    videoRef.current.load(); // Load the new video source\n                }\n\n                const allSubtitles = {};\n                const subtitleFiles = [];\n\n                // Fetch subtitles\n                await Promise.all(\n                    response.data.subtitles.map(async (subtitle) => {\n                        try {\n                            const subtitleResponse = await axios.get(`http://localhost:8000/subtitles/${selectedVideoID}/${subtitle.language}/`);\n                            const base64Data = subtitleResponse.data.subtitle_file;\n                            const binaryString = atob(base64Data);\n                            const binaryLength = binaryString.length;\n                            const bytes = new Uint8Array(binaryLength);\n                            for (let i = 0; i < binaryLength; i++) {\n                                bytes[i] = binaryString.charCodeAt(i);\n                            }\n                            const blob = new Blob([bytes], { type: 'application/x-subrip' });\n                            const url = URL.createObjectURL(blob);\n                            allSubtitles[subtitle.language] = JSON.parse(subtitleResponse.data.subtitle);\n                            subtitleFiles.push({ language: subtitle.language, subtitle_file_url: url });\n                        } catch (error) {\n                            console.error(`Error fetching subtitle for language ${subtitle.language}:`, error);\n                        }\n                    })\n                );\n\n                setSub(allSubtitles);\n                setSubtitles(subtitleFiles);\n\n                // Request video portion for streaming based on the provided seconds\n                if (seconds) {\n                    const byteRange = calculateByteRange(seconds);\n                    const streamResponse = await axios.post(`http://localhost:8000/stream/${selectedVideoID}/`, null, {\n                        headers: {\n                            'Range': byteRange\n                        },\n                        responseType: 'blob'\n                    });\n\n                    // Create a URL for the blob response and set it as the video source\n                    const videoBlobUrl = URL.createObjectURL(streamResponse.data);\n                    videoRef.current.src = videoBlobUrl;\n                    videoRef.current.currentTime = seconds; // Seek to the specific timestamp\n                    videoRef.current.play();\n                }\n\n            } catch (error) {\n                console.error(\"Error fetching video data:\", error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchVideoData();\n    }, [selectedVideoID, setSub, seconds]);\n\n    const calculateByteRange = (seconds) => {\n        const bytesPerSecond = 1024; // Adjust this based on your video's bitrate\n        const startByte = seconds * bytesPerSecond;\n        const endByte = startByte + bytesPerSecond - 1; // Requesting the next second of video\n        return `bytes=${startByte}-${endByte}`;\n    };\n\n    return (\n        <div className=\"main_vid\">\n            <div className=\"play_area\">\n                {loading && <div className=\"loading-circle\">Loading...</div>}\n                <video\n                    className=\"play_area\"\n                    width=\"1000\"\n                    height=\"500\"\n                    controls\n                    ref={videoRef}\n                    preload=\"auto\"\n                    onLoadedMetadata={() => {\n                        videoRef.current.controls = true;\n                    }}\n                    onError={(error) => console.error(\"Error loading video:\", error)}\n                >\n                    {subtitles.map((subtitle, index) => (\n                        <track\n                            key={index}\n                            src={subtitle.subtitle_file_url}\n                            label={subtitle.language}\n                            kind=\"subtitles\"\n                            srcLang={subtitle.language}\n                            default={subtitle.language === \"eng\"}\n                        />\n                    ))}\n                    Your browser does not support the video tag.\n                </video>\n            </div>\n            <header className=\"title-playing\">{displayTitle}</header>\n        </div>\n    );\n}\n\nexport default Vid;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}